#!/bin/sh

### BEGIN INIT INFO
# Provides:       gunicorn
# Required-Start: $local_fs $syslog
# Required-Stop:  $local_fs $syslog
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description: Gunicorn processes
### END INIT INFO

USER="<%= @owner %>"
NAME="gunicorn"
DAEMON="<%= @bin %> run_gunicorn"
PIDFILE="<%= @var_root %>run/<%= @_name %>.pid"
ENVFILE="<%= @env_path %>"
CONFFILE="<%= @gunicorn_conf_file %>"
OPTIONS="-c $CONFFILE -D"
RETVAL=0

# Source function library.
. /etc/rc.d/init.d/functions

run()
{
    su - $USER -c ". $ENVFILE && $DAEMON $OPTIONS";
    if [ $? -eq 0 ]; then
        echo "Start done"
        return 0
    else
        echo "ERROR - Process not started"
        return 1
    fi
}
status()
{
    if [ -f $PIDFILE ]; then
        ps -p `cat $PIDFILE` > /dev/null
        if [ $? -gt 0 ]; then
            echo "Process stopped"
            return 1 # program is dead and /var/run pid file exists
        else
            echo "Process running"
            return 0
        fi
    else
        echo "Process is not running"
        return 3
    fi
}

start()
{
    echo $"Starting $NAME."
    status
    if [  $? -gt 0 ]; then
        run
        return $?
    else
        echo "Already started!"
        return 1
    fi
}

stop()
{
    echo $"Stopping $NAME:"

    if [ -f $PIDFILE ];then
        kill -QUIT `cat $PIDFILE`

        if [  $? -eq 0 ]; then

            # Do nothing. Just wait that process is killed
            while [ -f $PIDFILE ]
            do
                continue;
            done

            echo "Stop done"
            return 0
        else
            echo "ERROR - Cannot stop process!"
            return 1
        fi
    else
        echo "Process not running"
        return 7
    fi

}

restart()
{
    echo $"Restarting $NAME:"
    stop
    if [  $? -gt 0 ]; then
        return $?
    fi

    echo "Now start"

    start
    if [  $? -eq 0 ]; then
        echo "Restart done"
        return 0
    else
        echo "ERROR - Unable to restart process!"
        return 1
    fi
}

case "$1" in
    start)
        start
        RETVAL=$?
        ;;
    stop)
        stop
        RETVAL=$?
        ;;
    restart)
        restart
        RETVAL=$?
        ;;
    status)
        status
        RETVAL=$?
        ;;
    *)
        echo $"Usage: $0 {start|status|stop|restart}"
        RETVAL=3 # unimplemented feature (for example, "reload")
esac
exit $RETVAL
